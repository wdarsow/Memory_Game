{"version":3,"sources":["components/Header/Header.js","components/NavbarMessage/NavbarMessage.js","components/Navbar/Navbar.js","components/Container/Container.js","components/Footer/Footer.js","components/Card/Card.js","components/MainGame/MainGame.js","App.js","index.js"],"names":["Header","props","className","NavbarMessage","state","navMessage","movement","renderNavbarMessage","prevProps","score","topScore","newState","this","setState","setTimeout","React","Component","Navbar","href","Container","children","Footer","Card","role","aria-label","onClick","handleClick","id","style","backgroundImage","image","shake","MainGame","gameData","goodGuess","newData","newScore","newTopScore","shufflerFunc","badGuess","badData","dataReset","map","item","clicked","i","length","k","Math","floor","random","placeHolder","correctGuess","newItem","key","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.075b56a3.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Header.css\";\r\n\r\nconst Header = props => (\r\n    <header className=\"header\">\r\n        <h1>Memory Game!</h1>\r\n            <h2>Click an image to earn points. Don't click an image more than once!</h2>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\nimport './NavbarMessage.css';\r\n\r\nclass NavbarMessage extends React.Component {\r\n    state = {\r\n        navMessage: \"\",\r\n        movement: false\r\n    }\r\n\r\n    componentDidUpdate(prevProps, score, topScore) {\r\n        const newState = { \r\n            movement: true\r\n         };\r\n        if (this.props.score === 0 && this.props.topScore === 0) {\r\n            newState.navMessage = \"\";\r\n        } else if (this.props.score === 0 && this.props.topScore > 0) {\r\n            newState.navMessage = \"wrong\";\r\n        } else {\r\n            newState.navMessage = \"perfect\";\r\n        }\r\n\r\n        if (this.props.score !== prevProps.score) {\r\n            this.setState(newState, () => {\r\n                setTimeout(() => this.setState({ \r\n                    movement: false\r\n                }), 500)\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    renderNavbarMessage = () => {\r\n        switch (this.state.navMessage) {\r\n            case \"perfect\":\r\n                return \"You were right!\";\r\n            case \"wrong\":\r\n                return \"You were wrong!\";\r\n            default:\r\n                return \"Click an image to begin!!\";\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <li className={this.state.movement ? this.state.navMessage : \"\"}>\r\n                {this.renderNavbarMessage()}\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavbarMessage;","import React from 'react';\r\nimport NavbarMessage from \"../NavbarMessage\";\r\nimport \"./Navbar.css\";\r\n\r\nconst Navbar = props => (\r\n    <nav className=\"navbar\">\r\n        <ul>\r\n            <li className=\"brand\">\r\n                <a href=\"/\">Memory Game</a>\r\n            </li>\r\n            <li>\r\n                <NavbarMessage score={props.score} topScore={props.topScore} />\r\n            </li>\r\n            <li>\r\n                Current Score: {props.score} | Best Score: {props.topScore}\r\n            </li>\r\n        </ul>\r\n    </nav>\r\n);\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport \"./Container.css\";\r\n\r\nconst Container = props => (\r\n    <main className=\"container\">\r\n        {props.children}\r\n    </main>\r\n)\r\n\r\nexport default Container;","import React from 'react';\r\nimport \"./Footer.css\";\r\n\r\nconst Footer = () => (\r\n    <footer className=\"footer\">\r\n        <div className=\"bottom\">\r\n            Memory Game!\r\n        </div>\r\n    </footer>\r\n);\r\n\r\nexport default Footer;","import React from 'react';\r\nimport \"./Card.css\";\r\n\r\nconst Card = props => (\r\n    <div\r\n        role=\"img\"\r\n        aria-label=\"card-item\"\r\n        onClick={() => props.handleClick(props.id)}\r\n        style={{ backgroundImage: `url(\"${props.image}\")` }}\r\n        className={`card-item${props.shake ? \" shake\" : \"\" } `}\r\n    />\r\n);\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Header from '../Header';\r\nimport Navbar from '../Navbar/Navbar.js';\r\nimport Container from '../Container';\r\nimport Footer from '../Footer';\r\nimport Card from '../Card';\r\nimport gameData from '../../gameData.json';\r\nimport './MainGame.css';\r\n\r\nclass MainGame extends React.Component {\r\n    state = {\r\n        gameData,\r\n        score: 0,\r\n        topScore: 0\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ gameData: this.shufflerFunc(this.state.gameData) })\r\n    }\r\n\r\n    goodGuess = newData => {\r\n        const { topScore, score } = this.state;\r\n        const newScore = score + 1;\r\n        const newTopScore = newScore > topScore ? newScore : topScore;\r\n        this.setState({\r\n            gameData: this.shufflerFunc(newData),\r\n            score: newScore,\r\n            topScore: newTopScore\r\n        });\r\n    };\r\n\r\n    badGuess = badData => {\r\n        this.setState({\r\n            gameData: this.dataReset(badData),\r\n            score: 0\r\n        });\r\n    };\r\n\r\n    dataReset = badData => {\r\n        const dataReset = badData.map(item => ({ ...item, clicked: false }));\r\n        return this.shufflerFunc(dataReset);\r\n    }\r\n\r\n    shufflerFunc = gameData => {\r\n        let i = gameData.length - 1;\r\n        while (i > 0) {\r\n            const k = Math.floor(Math.random() * (i + 1));\r\n            const placeHolder = gameData[i];\r\n            gameData[i] = gameData[k];\r\n            gameData[k] = placeHolder;\r\n            i--;\r\n        }\r\n        return gameData;\r\n    }\r\n\r\n    handleClick = id => {\r\n        let correctGuess = false;\r\n        const newData = this.state.gameData.map(item => {\r\n            const newItem = { ...item };\r\n            if (newItem.id === id) {\r\n                if (!newItem.clicked) {\r\n                    newItem.clicked = true;\r\n                    correctGuess = true;\r\n                }\r\n            }\r\n            \r\n            return newItem;\r\n        });\r\n        correctGuess ? this.goodGuess(newData) : this.badGuess(newData);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"mainDiv\">\r\n                <Navbar score={this.state.score} topScore={this.state.topScore} />\r\n                <Header />\r\n                <Container>\r\n                    {this.state.gameData.map(item => (\r\n                        <Card\r\n                            key={item.id}\r\n                            id={item.id}\r\n                            shake={!this.state.score && this.state.topScore}\r\n                            handleClick={this.handleClick}\r\n                            image={item.image}\r\n                        />\r\n                    ))}\r\n                </Container>\r\n                <Footer />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MainGame; ","import React from 'react';\nimport MainGame from './components/MainGame';\n\nconst App = () => <MainGame />;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}